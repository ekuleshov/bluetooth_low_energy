// Autogenerated from Pigeon (v20.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum BluetoothLowEnergyStateArgs {
  unknown,
  resetting,
  unsupported,
  unauthorized,
  poweredOff,
  poweredOn,
}

enum ConnectionStateArgs {
  disconnected,
  connected,
}

enum GATTCharacteristicPropertyArgs {
  read,
  write,
  writeWithoutResponse,
  notify,
  indicate,
}

enum GATTCharacteristicPermissionArgs {
  read,
  readEncrypted,
  write,
  writeEncrypted,
}

enum GATTCharacteristicWriteTypeArgs {
  withResponse,
  withoutResponse,
}

enum ATTErrorArgs {
  success,
  invalidHandle,
  readNotPermitted,
  writeNotPermitted,
  invalidPDU,
  insufficientAuthentication,
  requestNotSupported,
  invalidOffset,
  insufficientAuthorization,
  prepareQueueFull,
  attributeNotFound,
  attributeNotLong,
  insufficientEncryptionKeySize,
  invalidAttributeValueLength,
  unlikelyError,
  insufficientEncryption,
  unsupportedGroupType,
  insufficientResources,
}

class AdvertisementArgs {
  AdvertisementArgs({
    this.nameArgs,
    required this.serviceUUIDsArgs,
    required this.serviceDataArgs,
    this.manufacturerSpecificDataArgs,
  });

  String? nameArgs;

  List<String?> serviceUUIDsArgs;

  Map<String?, Uint8List?> serviceDataArgs;

  Uint8List? manufacturerSpecificDataArgs;

  Object encode() {
    return <Object?>[
      nameArgs,
      serviceUUIDsArgs,
      serviceDataArgs,
      manufacturerSpecificDataArgs,
    ];
  }

  static AdvertisementArgs decode(Object result) {
    result as List<Object?>;
    return AdvertisementArgs(
      nameArgs: result[0] as String?,
      serviceUUIDsArgs: (result[1] as List<Object?>?)!.cast<String?>(),
      serviceDataArgs: (result[2] as Map<Object?, Object?>?)!.cast<String?, Uint8List?>(),
      manufacturerSpecificDataArgs: result[3] as Uint8List?,
    );
  }
}

class CentralArgs {
  CentralArgs({
    required this.uuidArgs,
  });

  String uuidArgs;

  Object encode() {
    return <Object?>[
      uuidArgs,
    ];
  }

  static CentralArgs decode(Object result) {
    result as List<Object?>;
    return CentralArgs(
      uuidArgs: result[0]! as String,
    );
  }
}

class PeripheralArgs {
  PeripheralArgs({
    required this.uuidArgs,
  });

  String uuidArgs;

  Object encode() {
    return <Object?>[
      uuidArgs,
    ];
  }

  static PeripheralArgs decode(Object result) {
    result as List<Object?>;
    return PeripheralArgs(
      uuidArgs: result[0]! as String,
    );
  }
}

class GATTDescriptorArgs {
  GATTDescriptorArgs({
    required this.hashCodeArgs,
    required this.uuidArgs,
  });

  int hashCodeArgs;

  String uuidArgs;

  Object encode() {
    return <Object?>[
      hashCodeArgs,
      uuidArgs,
    ];
  }

  static GATTDescriptorArgs decode(Object result) {
    result as List<Object?>;
    return GATTDescriptorArgs(
      hashCodeArgs: result[0]! as int,
      uuidArgs: result[1]! as String,
    );
  }
}

class GATTCharacteristicArgs {
  GATTCharacteristicArgs({
    required this.hashCodeArgs,
    required this.uuidArgs,
    required this.propertyNumbersArgs,
    required this.descriptorsArgs,
  });

  int hashCodeArgs;

  String uuidArgs;

  List<int?> propertyNumbersArgs;

  List<GATTDescriptorArgs?> descriptorsArgs;

  Object encode() {
    return <Object?>[
      hashCodeArgs,
      uuidArgs,
      propertyNumbersArgs,
      descriptorsArgs,
    ];
  }

  static GATTCharacteristicArgs decode(Object result) {
    result as List<Object?>;
    return GATTCharacteristicArgs(
      hashCodeArgs: result[0]! as int,
      uuidArgs: result[1]! as String,
      propertyNumbersArgs: (result[2] as List<Object?>?)!.cast<int?>(),
      descriptorsArgs: (result[3] as List<Object?>?)!.cast<GATTDescriptorArgs?>(),
    );
  }
}

class GATTServiceArgs {
  GATTServiceArgs({
    required this.hashCodeArgs,
    required this.uuidArgs,
    required this.isPrimaryArgs,
    required this.includedServicesArgs,
    required this.characteristicsArgs,
  });

  int hashCodeArgs;

  String uuidArgs;

  bool isPrimaryArgs;

  List<GATTServiceArgs?> includedServicesArgs;

  List<GATTCharacteristicArgs?> characteristicsArgs;

  Object encode() {
    return <Object?>[
      hashCodeArgs,
      uuidArgs,
      isPrimaryArgs,
      includedServicesArgs,
      characteristicsArgs,
    ];
  }

  static GATTServiceArgs decode(Object result) {
    result as List<Object?>;
    return GATTServiceArgs(
      hashCodeArgs: result[0]! as int,
      uuidArgs: result[1]! as String,
      isPrimaryArgs: result[2]! as bool,
      includedServicesArgs: (result[3] as List<Object?>?)!.cast<GATTServiceArgs?>(),
      characteristicsArgs: (result[4] as List<Object?>?)!.cast<GATTCharacteristicArgs?>(),
    );
  }
}

class MutableGATTDescriptorArgs {
  MutableGATTDescriptorArgs({
    required this.hashCodeArgs,
    required this.uuidArgs,
    this.valueArgs,
  });

  int hashCodeArgs;

  String uuidArgs;

  Uint8List? valueArgs;

  Object encode() {
    return <Object?>[
      hashCodeArgs,
      uuidArgs,
      valueArgs,
    ];
  }

  static MutableGATTDescriptorArgs decode(Object result) {
    result as List<Object?>;
    return MutableGATTDescriptorArgs(
      hashCodeArgs: result[0]! as int,
      uuidArgs: result[1]! as String,
      valueArgs: result[2] as Uint8List?,
    );
  }
}

class MutableGATTCharacteristicArgs {
  MutableGATTCharacteristicArgs({
    required this.hashCodeArgs,
    required this.uuidArgs,
    required this.propertyNumbersArgs,
    required this.permissionNumbersArgs,
    this.valueArgs,
    required this.descriptorsArgs,
  });

  int hashCodeArgs;

  String uuidArgs;

  List<int?> propertyNumbersArgs;

  List<int?> permissionNumbersArgs;

  Uint8List? valueArgs;

  List<MutableGATTDescriptorArgs?> descriptorsArgs;

  Object encode() {
    return <Object?>[
      hashCodeArgs,
      uuidArgs,
      propertyNumbersArgs,
      permissionNumbersArgs,
      valueArgs,
      descriptorsArgs,
    ];
  }

  static MutableGATTCharacteristicArgs decode(Object result) {
    result as List<Object?>;
    return MutableGATTCharacteristicArgs(
      hashCodeArgs: result[0]! as int,
      uuidArgs: result[1]! as String,
      propertyNumbersArgs: (result[2] as List<Object?>?)!.cast<int?>(),
      permissionNumbersArgs: (result[3] as List<Object?>?)!.cast<int?>(),
      valueArgs: result[4] as Uint8List?,
      descriptorsArgs: (result[5] as List<Object?>?)!.cast<MutableGATTDescriptorArgs?>(),
    );
  }
}

class MutableGATTServiceArgs {
  MutableGATTServiceArgs({
    required this.hashCodeArgs,
    required this.uuidArgs,
    required this.isPrimaryArgs,
    required this.includedServicesArgs,
    required this.characteristicsArgs,
  });

  int hashCodeArgs;

  String uuidArgs;

  bool isPrimaryArgs;

  List<MutableGATTServiceArgs?> includedServicesArgs;

  List<MutableGATTCharacteristicArgs?> characteristicsArgs;

  Object encode() {
    return <Object?>[
      hashCodeArgs,
      uuidArgs,
      isPrimaryArgs,
      includedServicesArgs,
      characteristicsArgs,
    ];
  }

  static MutableGATTServiceArgs decode(Object result) {
    result as List<Object?>;
    return MutableGATTServiceArgs(
      hashCodeArgs: result[0]! as int,
      uuidArgs: result[1]! as String,
      isPrimaryArgs: result[2]! as bool,
      includedServicesArgs: (result[3] as List<Object?>?)!.cast<MutableGATTServiceArgs?>(),
      characteristicsArgs: (result[4] as List<Object?>?)!.cast<MutableGATTCharacteristicArgs?>(),
    );
  }
}

class ATTRequestArgs {
  ATTRequestArgs({
    required this.hashCodeArgs,
    required this.characteristicHashCodeArgs,
    required this.centralArgs,
    required this.offsetArgs,
    this.valueArgs,
  });

  int hashCodeArgs;

  int characteristicHashCodeArgs;

  CentralArgs centralArgs;

  int offsetArgs;

  Uint8List? valueArgs;

  Object encode() {
    return <Object?>[
      hashCodeArgs,
      characteristicHashCodeArgs,
      centralArgs,
      offsetArgs,
      valueArgs,
    ];
  }

  static ATTRequestArgs decode(Object result) {
    result as List<Object?>;
    return ATTRequestArgs(
      hashCodeArgs: result[0]! as int,
      characteristicHashCodeArgs: result[1]! as int,
      centralArgs: result[2]! as CentralArgs,
      offsetArgs: result[3]! as int,
      valueArgs: result[4] as Uint8List?,
    );
  }
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AdvertisementArgs) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else     if (value is CentralArgs) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else     if (value is PeripheralArgs) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else     if (value is GATTDescriptorArgs) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else     if (value is GATTCharacteristicArgs) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else     if (value is GATTServiceArgs) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else     if (value is MutableGATTDescriptorArgs) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else     if (value is MutableGATTCharacteristicArgs) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else     if (value is MutableGATTServiceArgs) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else     if (value is ATTRequestArgs) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else     if (value is BluetoothLowEnergyStateArgs) {
      buffer.putUint8(139);
      writeValue(buffer, value.index);
    } else     if (value is ConnectionStateArgs) {
      buffer.putUint8(140);
      writeValue(buffer, value.index);
    } else     if (value is GATTCharacteristicPropertyArgs) {
      buffer.putUint8(141);
      writeValue(buffer, value.index);
    } else     if (value is GATTCharacteristicPermissionArgs) {
      buffer.putUint8(142);
      writeValue(buffer, value.index);
    } else     if (value is GATTCharacteristicWriteTypeArgs) {
      buffer.putUint8(143);
      writeValue(buffer, value.index);
    } else     if (value is ATTErrorArgs) {
      buffer.putUint8(144);
      writeValue(buffer, value.index);
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        return AdvertisementArgs.decode(readValue(buffer)!);
      case 130: 
        return CentralArgs.decode(readValue(buffer)!);
      case 131: 
        return PeripheralArgs.decode(readValue(buffer)!);
      case 132: 
        return GATTDescriptorArgs.decode(readValue(buffer)!);
      case 133: 
        return GATTCharacteristicArgs.decode(readValue(buffer)!);
      case 134: 
        return GATTServiceArgs.decode(readValue(buffer)!);
      case 135: 
        return MutableGATTDescriptorArgs.decode(readValue(buffer)!);
      case 136: 
        return MutableGATTCharacteristicArgs.decode(readValue(buffer)!);
      case 137: 
        return MutableGATTServiceArgs.decode(readValue(buffer)!);
      case 138: 
        return ATTRequestArgs.decode(readValue(buffer)!);
      case 139: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : BluetoothLowEnergyStateArgs.values[value];
      case 140: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ConnectionStateArgs.values[value];
      case 141: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : GATTCharacteristicPropertyArgs.values[value];
      case 142: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : GATTCharacteristicPermissionArgs.values[value];
      case 143: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : GATTCharacteristicWriteTypeArgs.values[value];
      case 144: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : ATTErrorArgs.values[value];
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class CentralManagerHostAPI {
  /// Constructor for [CentralManagerHostAPI].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  CentralManagerHostAPI({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : __pigeon_binaryMessenger = binaryMessenger,
        __pigeon_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String __pigeon_messageChannelSuffix;

  Future<void> initialize() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.initialize$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<BluetoothLowEnergyStateArgs> getState() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.getState$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as BluetoothLowEnergyStateArgs?)!;
    }
  }

  Future<void> showAppSettings() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.showAppSettings$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> startDiscovery(List<String?> serviceUUIDsArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.startDiscovery$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[serviceUUIDsArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopDiscovery() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.stopDiscovery$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<List<PeripheralArgs?>> retrieveConnectedPeripherals() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.retrieveConnectedPeripherals$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<PeripheralArgs?>();
    }
  }

  Future<void> connect(String uuidArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.connect$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[uuidArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> disconnect(String uuidArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.disconnect$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[uuidArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<int> getMaximumWriteLength(String uuidArgs, GATTCharacteristicWriteTypeArgs typeArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.getMaximumWriteLength$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[uuidArgs, typeArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  Future<int> readRSSI(String uuidArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.readRSSI$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[uuidArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  Future<List<GATTServiceArgs?>> discoverServices(String uuidArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.discoverServices$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[uuidArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<GATTServiceArgs?>();
    }
  }

  Future<List<GATTServiceArgs?>> discoverIncludedServices(String uuidArgs, int hashCodeArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.discoverIncludedServices$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[uuidArgs, hashCodeArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<GATTServiceArgs?>();
    }
  }

  Future<List<GATTCharacteristicArgs?>> discoverCharacteristics(String uuidArgs, int hashCodeArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.discoverCharacteristics$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[uuidArgs, hashCodeArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<GATTCharacteristicArgs?>();
    }
  }

  Future<List<GATTDescriptorArgs?>> discoverDescriptors(String uuidArgs, int hashCodeArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.discoverDescriptors$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[uuidArgs, hashCodeArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as List<Object?>?)!.cast<GATTDescriptorArgs?>();
    }
  }

  Future<Uint8List> readCharacteristic(String uuidArgs, int hashCodeArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.readCharacteristic$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[uuidArgs, hashCodeArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?)!;
    }
  }

  Future<void> writeCharacteristic(String uuidArgs, int hashCodeArgs, Uint8List valueArgs, GATTCharacteristicWriteTypeArgs typeArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.writeCharacteristic$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[uuidArgs, hashCodeArgs, valueArgs, typeArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setCharacteristicNotifyState(String uuidArgs, int hashCodeArgs, bool stateArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.setCharacteristicNotifyState$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[uuidArgs, hashCodeArgs, stateArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<Uint8List> readDescriptor(String uuidArgs, int hashCodeArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.readDescriptor$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[uuidArgs, hashCodeArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as Uint8List?)!;
    }
  }

  Future<void> writeDescriptor(String uuidArgs, int hashCodeArgs, Uint8List valueArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.writeDescriptor$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[uuidArgs, hashCodeArgs, valueArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class CentralManagerFlutterAPI {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void onStateChanged(BluetoothLowEnergyStateArgs stateArgs);

  void onDiscovered(PeripheralArgs peripheralArgs, int rssiArgs, AdvertisementArgs advertisementArgs);

  void onConnectionStateChanged(PeripheralArgs peripheralArgs, ConnectionStateArgs stateArgs);

  void onCharacteristicNotified(PeripheralArgs peripheralArgs, GATTCharacteristicArgs characteristicArgs, Uint8List valueArgs);

  static void setUp(CentralManagerFlutterAPI? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerFlutterAPI.onStateChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerFlutterAPI.onStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final BluetoothLowEnergyStateArgs? arg_stateArgs = (args[0] as BluetoothLowEnergyStateArgs?);
          assert(arg_stateArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerFlutterAPI.onStateChanged was null, expected non-null BluetoothLowEnergyStateArgs.');
          try {
            api.onStateChanged(arg_stateArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerFlutterAPI.onDiscovered$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerFlutterAPI.onDiscovered was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PeripheralArgs? arg_peripheralArgs = (args[0] as PeripheralArgs?);
          assert(arg_peripheralArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerFlutterAPI.onDiscovered was null, expected non-null PeripheralArgs.');
          final int? arg_rssiArgs = (args[1] as int?);
          assert(arg_rssiArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerFlutterAPI.onDiscovered was null, expected non-null int.');
          final AdvertisementArgs? arg_advertisementArgs = (args[2] as AdvertisementArgs?);
          assert(arg_advertisementArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerFlutterAPI.onDiscovered was null, expected non-null AdvertisementArgs.');
          try {
            api.onDiscovered(arg_peripheralArgs!, arg_rssiArgs!, arg_advertisementArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerFlutterAPI.onConnectionStateChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerFlutterAPI.onConnectionStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PeripheralArgs? arg_peripheralArgs = (args[0] as PeripheralArgs?);
          assert(arg_peripheralArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerFlutterAPI.onConnectionStateChanged was null, expected non-null PeripheralArgs.');
          final ConnectionStateArgs? arg_stateArgs = (args[1] as ConnectionStateArgs?);
          assert(arg_stateArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerFlutterAPI.onConnectionStateChanged was null, expected non-null ConnectionStateArgs.');
          try {
            api.onConnectionStateChanged(arg_peripheralArgs!, arg_stateArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerFlutterAPI.onCharacteristicNotified$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerFlutterAPI.onCharacteristicNotified was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final PeripheralArgs? arg_peripheralArgs = (args[0] as PeripheralArgs?);
          assert(arg_peripheralArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerFlutterAPI.onCharacteristicNotified was null, expected non-null PeripheralArgs.');
          final GATTCharacteristicArgs? arg_characteristicArgs = (args[1] as GATTCharacteristicArgs?);
          assert(arg_characteristicArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerFlutterAPI.onCharacteristicNotified was null, expected non-null GATTCharacteristicArgs.');
          final Uint8List? arg_valueArgs = (args[2] as Uint8List?);
          assert(arg_valueArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerFlutterAPI.onCharacteristicNotified was null, expected non-null Uint8List.');
          try {
            api.onCharacteristicNotified(arg_peripheralArgs!, arg_characteristicArgs!, arg_valueArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}

class PeripheralManagerHostAPI {
  /// Constructor for [PeripheralManagerHostAPI].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  PeripheralManagerHostAPI({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : __pigeon_binaryMessenger = binaryMessenger,
        __pigeon_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? __pigeon_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String __pigeon_messageChannelSuffix;

  Future<void> initialize() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerHostAPI.initialize$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<BluetoothLowEnergyStateArgs> getState() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerHostAPI.getState$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as BluetoothLowEnergyStateArgs?)!;
    }
  }

  Future<void> showAppSettings() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerHostAPI.showAppSettings$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> addService(MutableGATTServiceArgs serviceArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerHostAPI.addService$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[serviceArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> removeService(int hashCodeArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerHostAPI.removeService$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[hashCodeArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> removeAllServices() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerHostAPI.removeAllServices$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> startAdvertising(AdvertisementArgs advertisementArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerHostAPI.startAdvertising$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[advertisementArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopAdvertising() async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerHostAPI.stopAdvertising$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(null) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<int> getMaximumNotifyLength(String uuidArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerHostAPI.getMaximumNotifyLength$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[uuidArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as int?)!;
    }
  }

  Future<void> respond(int hashCodeArgs, Uint8List? valueArgs, ATTErrorArgs errorArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerHostAPI.respond$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[hashCodeArgs, valueArgs, errorArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> updateValue(int hashCodeArgs, Uint8List valueArgs, List<String?>? uuidsArgs) async {
    final String __pigeon_channelName = 'dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerHostAPI.updateValue$__pigeon_messageChannelSuffix';
    final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
      __pigeon_channelName,
      pigeonChannelCodec,
      binaryMessenger: __pigeon_binaryMessenger,
    );
    final List<Object?>? __pigeon_replyList =
        await __pigeon_channel.send(<Object?>[hashCodeArgs, valueArgs, uuidsArgs]) as List<Object?>?;
    if (__pigeon_replyList == null) {
      throw _createConnectionError(__pigeon_channelName);
    } else if (__pigeon_replyList.length > 1) {
      throw PlatformException(
        code: __pigeon_replyList[0]! as String,
        message: __pigeon_replyList[1] as String?,
        details: __pigeon_replyList[2],
      );
    } else if (__pigeon_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (__pigeon_replyList[0] as bool?)!;
    }
  }
}

abstract class PeripheralManagerFlutterAPI {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void onStateChanged(BluetoothLowEnergyStateArgs stateArgs);

  void didReceiveRead(ATTRequestArgs requestArgs);

  void didReceiveWrite(List<ATTRequestArgs?> requestsArgs);

  void isReady();

  void onCharacteristicNotifyStateChanged(int hashCodeArgs, CentralArgs centralArgs, bool stateArgs);

  static void setUp(PeripheralManagerFlutterAPI? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerFlutterAPI.onStateChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerFlutterAPI.onStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final BluetoothLowEnergyStateArgs? arg_stateArgs = (args[0] as BluetoothLowEnergyStateArgs?);
          assert(arg_stateArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerFlutterAPI.onStateChanged was null, expected non-null BluetoothLowEnergyStateArgs.');
          try {
            api.onStateChanged(arg_stateArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerFlutterAPI.didReceiveRead$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerFlutterAPI.didReceiveRead was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final ATTRequestArgs? arg_requestArgs = (args[0] as ATTRequestArgs?);
          assert(arg_requestArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerFlutterAPI.didReceiveRead was null, expected non-null ATTRequestArgs.');
          try {
            api.didReceiveRead(arg_requestArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerFlutterAPI.didReceiveWrite$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerFlutterAPI.didReceiveWrite was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final List<ATTRequestArgs?>? arg_requestsArgs = (args[0] as List<Object?>?)?.cast<ATTRequestArgs?>();
          assert(arg_requestsArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerFlutterAPI.didReceiveWrite was null, expected non-null List<ATTRequestArgs?>.');
          try {
            api.didReceiveWrite(arg_requestsArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerFlutterAPI.isReady$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          try {
            api.isReady();
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> __pigeon_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerFlutterAPI.onCharacteristicNotifyStateChanged$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        __pigeon_channel.setMessageHandler(null);
      } else {
        __pigeon_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerFlutterAPI.onCharacteristicNotifyStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_hashCodeArgs = (args[0] as int?);
          assert(arg_hashCodeArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerFlutterAPI.onCharacteristicNotifyStateChanged was null, expected non-null int.');
          final CentralArgs? arg_centralArgs = (args[1] as CentralArgs?);
          assert(arg_centralArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerFlutterAPI.onCharacteristicNotifyStateChanged was null, expected non-null CentralArgs.');
          final bool? arg_stateArgs = (args[2] as bool?);
          assert(arg_stateArgs != null,
              'Argument for dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerFlutterAPI.onCharacteristicNotifyStateChanged was null, expected non-null bool.');
          try {
            api.onCharacteristicNotifyStateChanged(arg_hashCodeArgs!, arg_centralArgs!, arg_stateArgs!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
