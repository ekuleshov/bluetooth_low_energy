// Autogenerated from Pigeon (v20.0.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum BluetoothLowEnergyStateArgs: Int {
  case unknown = 0
  case resetting = 1
  case unsupported = 2
  case unauthorized = 3
  case poweredOff = 4
  case poweredOn = 5
}

enum ConnectionStateArgs: Int {
  case disconnected = 0
  case connected = 1
}

enum GATTCharacteristicPropertyArgs: Int {
  case read = 0
  case write = 1
  case writeWithoutResponse = 2
  case notify = 3
  case indicate = 4
}

enum GATTCharacteristicPermissionArgs: Int {
  case read = 0
  case readEncrypted = 1
  case write = 2
  case writeEncrypted = 3
}

enum GATTCharacteristicWriteTypeArgs: Int {
  case withResponse = 0
  case withoutResponse = 1
}

enum ATTErrorArgs: Int {
  case success = 0
  case invalidHandle = 1
  case readNotPermitted = 2
  case writeNotPermitted = 3
  case invalidPDU = 4
  case insufficientAuthentication = 5
  case requestNotSupported = 6
  case invalidOffset = 7
  case insufficientAuthorization = 8
  case prepareQueueFull = 9
  case attributeNotFound = 10
  case attributeNotLong = 11
  case insufficientEncryptionKeySize = 12
  case invalidAttributeValueLength = 13
  case unlikelyError = 14
  case insufficientEncryption = 15
  case unsupportedGroupType = 16
  case insufficientResources = 17
}

/// Generated class from Pigeon that represents data sent in messages.
struct AdvertisementArgs {
  var nameArgs: String? = nil
  var serviceUUIDsArgs: [String?]
  var serviceDataArgs: [String?: FlutterStandardTypedData?]
  var manufacturerSpecificDataArgs: FlutterStandardTypedData? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> AdvertisementArgs? {
    let nameArgs: String? = nilOrValue(__pigeon_list[0])
    let serviceUUIDsArgs = __pigeon_list[1] as! [String?]
    let serviceDataArgs = __pigeon_list[2] as! [String?: FlutterStandardTypedData?]
    let manufacturerSpecificDataArgs: FlutterStandardTypedData? = nilOrValue(__pigeon_list[3])

    return AdvertisementArgs(
      nameArgs: nameArgs,
      serviceUUIDsArgs: serviceUUIDsArgs,
      serviceDataArgs: serviceDataArgs,
      manufacturerSpecificDataArgs: manufacturerSpecificDataArgs
    )
  }
  func toList() -> [Any?] {
    return [
      nameArgs,
      serviceUUIDsArgs,
      serviceDataArgs,
      manufacturerSpecificDataArgs,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct CentralArgs {
  var uuidArgs: String

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> CentralArgs? {
    let uuidArgs = __pigeon_list[0] as! String

    return CentralArgs(
      uuidArgs: uuidArgs
    )
  }
  func toList() -> [Any?] {
    return [
      uuidArgs
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PeripheralArgs {
  var uuidArgs: String

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> PeripheralArgs? {
    let uuidArgs = __pigeon_list[0] as! String

    return PeripheralArgs(
      uuidArgs: uuidArgs
    )
  }
  func toList() -> [Any?] {
    return [
      uuidArgs
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct GATTDescriptorArgs {
  var hashCodeArgs: Int64
  var uuidArgs: String

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> GATTDescriptorArgs? {
    let hashCodeArgs = __pigeon_list[0] is Int64 ? __pigeon_list[0] as! Int64 : Int64(__pigeon_list[0] as! Int32)
    let uuidArgs = __pigeon_list[1] as! String

    return GATTDescriptorArgs(
      hashCodeArgs: hashCodeArgs,
      uuidArgs: uuidArgs
    )
  }
  func toList() -> [Any?] {
    return [
      hashCodeArgs,
      uuidArgs,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct GATTCharacteristicArgs {
  var hashCodeArgs: Int64
  var uuidArgs: String
  var propertyNumbersArgs: [Int64?]
  var descriptorsArgs: [GATTDescriptorArgs?]

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> GATTCharacteristicArgs? {
    let hashCodeArgs = __pigeon_list[0] is Int64 ? __pigeon_list[0] as! Int64 : Int64(__pigeon_list[0] as! Int32)
    let uuidArgs = __pigeon_list[1] as! String
    let propertyNumbersArgs = __pigeon_list[2] as! [Int64?]
    let descriptorsArgs = __pigeon_list[3] as! [GATTDescriptorArgs?]

    return GATTCharacteristicArgs(
      hashCodeArgs: hashCodeArgs,
      uuidArgs: uuidArgs,
      propertyNumbersArgs: propertyNumbersArgs,
      descriptorsArgs: descriptorsArgs
    )
  }
  func toList() -> [Any?] {
    return [
      hashCodeArgs,
      uuidArgs,
      propertyNumbersArgs,
      descriptorsArgs,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct GATTServiceArgs {
  var hashCodeArgs: Int64
  var uuidArgs: String
  var isPrimaryArgs: Bool
  var includedServicesArgs: [GATTServiceArgs?]
  var characteristicsArgs: [GATTCharacteristicArgs?]

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> GATTServiceArgs? {
    let hashCodeArgs = __pigeon_list[0] is Int64 ? __pigeon_list[0] as! Int64 : Int64(__pigeon_list[0] as! Int32)
    let uuidArgs = __pigeon_list[1] as! String
    let isPrimaryArgs = __pigeon_list[2] as! Bool
    let includedServicesArgs = __pigeon_list[3] as! [GATTServiceArgs?]
    let characteristicsArgs = __pigeon_list[4] as! [GATTCharacteristicArgs?]

    return GATTServiceArgs(
      hashCodeArgs: hashCodeArgs,
      uuidArgs: uuidArgs,
      isPrimaryArgs: isPrimaryArgs,
      includedServicesArgs: includedServicesArgs,
      characteristicsArgs: characteristicsArgs
    )
  }
  func toList() -> [Any?] {
    return [
      hashCodeArgs,
      uuidArgs,
      isPrimaryArgs,
      includedServicesArgs,
      characteristicsArgs,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MutableGATTDescriptorArgs {
  var hashCodeArgs: Int64
  var uuidArgs: String
  var valueArgs: FlutterStandardTypedData? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> MutableGATTDescriptorArgs? {
    let hashCodeArgs = __pigeon_list[0] is Int64 ? __pigeon_list[0] as! Int64 : Int64(__pigeon_list[0] as! Int32)
    let uuidArgs = __pigeon_list[1] as! String
    let valueArgs: FlutterStandardTypedData? = nilOrValue(__pigeon_list[2])

    return MutableGATTDescriptorArgs(
      hashCodeArgs: hashCodeArgs,
      uuidArgs: uuidArgs,
      valueArgs: valueArgs
    )
  }
  func toList() -> [Any?] {
    return [
      hashCodeArgs,
      uuidArgs,
      valueArgs,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MutableGATTCharacteristicArgs {
  var hashCodeArgs: Int64
  var uuidArgs: String
  var propertyNumbersArgs: [Int64?]
  var permissionNumbersArgs: [Int64?]
  var valueArgs: FlutterStandardTypedData? = nil
  var descriptorsArgs: [MutableGATTDescriptorArgs?]

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> MutableGATTCharacteristicArgs? {
    let hashCodeArgs = __pigeon_list[0] is Int64 ? __pigeon_list[0] as! Int64 : Int64(__pigeon_list[0] as! Int32)
    let uuidArgs = __pigeon_list[1] as! String
    let propertyNumbersArgs = __pigeon_list[2] as! [Int64?]
    let permissionNumbersArgs = __pigeon_list[3] as! [Int64?]
    let valueArgs: FlutterStandardTypedData? = nilOrValue(__pigeon_list[4])
    let descriptorsArgs = __pigeon_list[5] as! [MutableGATTDescriptorArgs?]

    return MutableGATTCharacteristicArgs(
      hashCodeArgs: hashCodeArgs,
      uuidArgs: uuidArgs,
      propertyNumbersArgs: propertyNumbersArgs,
      permissionNumbersArgs: permissionNumbersArgs,
      valueArgs: valueArgs,
      descriptorsArgs: descriptorsArgs
    )
  }
  func toList() -> [Any?] {
    return [
      hashCodeArgs,
      uuidArgs,
      propertyNumbersArgs,
      permissionNumbersArgs,
      valueArgs,
      descriptorsArgs,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct MutableGATTServiceArgs {
  var hashCodeArgs: Int64
  var uuidArgs: String
  var isPrimaryArgs: Bool
  var includedServicesArgs: [MutableGATTServiceArgs?]
  var characteristicsArgs: [MutableGATTCharacteristicArgs?]

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> MutableGATTServiceArgs? {
    let hashCodeArgs = __pigeon_list[0] is Int64 ? __pigeon_list[0] as! Int64 : Int64(__pigeon_list[0] as! Int32)
    let uuidArgs = __pigeon_list[1] as! String
    let isPrimaryArgs = __pigeon_list[2] as! Bool
    let includedServicesArgs = __pigeon_list[3] as! [MutableGATTServiceArgs?]
    let characteristicsArgs = __pigeon_list[4] as! [MutableGATTCharacteristicArgs?]

    return MutableGATTServiceArgs(
      hashCodeArgs: hashCodeArgs,
      uuidArgs: uuidArgs,
      isPrimaryArgs: isPrimaryArgs,
      includedServicesArgs: includedServicesArgs,
      characteristicsArgs: characteristicsArgs
    )
  }
  func toList() -> [Any?] {
    return [
      hashCodeArgs,
      uuidArgs,
      isPrimaryArgs,
      includedServicesArgs,
      characteristicsArgs,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct ATTRequestArgs {
  var hashCodeArgs: Int64
  var characteristicHashCodeArgs: Int64
  var centralArgs: CentralArgs
  var offsetArgs: Int64
  var valueArgs: FlutterStandardTypedData? = nil

  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ __pigeon_list: [Any?]) -> ATTRequestArgs? {
    let hashCodeArgs = __pigeon_list[0] is Int64 ? __pigeon_list[0] as! Int64 : Int64(__pigeon_list[0] as! Int32)
    let characteristicHashCodeArgs = __pigeon_list[1] is Int64 ? __pigeon_list[1] as! Int64 : Int64(__pigeon_list[1] as! Int32)
    let centralArgs = __pigeon_list[2] as! CentralArgs
    let offsetArgs = __pigeon_list[3] is Int64 ? __pigeon_list[3] as! Int64 : Int64(__pigeon_list[3] as! Int32)
    let valueArgs: FlutterStandardTypedData? = nilOrValue(__pigeon_list[4])

    return ATTRequestArgs(
      hashCodeArgs: hashCodeArgs,
      characteristicHashCodeArgs: characteristicHashCodeArgs,
      centralArgs: centralArgs,
      offsetArgs: offsetArgs,
      valueArgs: valueArgs
    )
  }
  func toList() -> [Any?] {
    return [
      hashCodeArgs,
      characteristicHashCodeArgs,
      centralArgs,
      offsetArgs,
      valueArgs,
    ]
  }
}
private class PigeonPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return AdvertisementArgs.fromList(self.readValue() as! [Any?])
    case 130:
      return CentralArgs.fromList(self.readValue() as! [Any?])
    case 131:
      return PeripheralArgs.fromList(self.readValue() as! [Any?])
    case 132:
      return GATTDescriptorArgs.fromList(self.readValue() as! [Any?])
    case 133:
      return GATTCharacteristicArgs.fromList(self.readValue() as! [Any?])
    case 134:
      return GATTServiceArgs.fromList(self.readValue() as! [Any?])
    case 135:
      return MutableGATTDescriptorArgs.fromList(self.readValue() as! [Any?])
    case 136:
      return MutableGATTCharacteristicArgs.fromList(self.readValue() as! [Any?])
    case 137:
      return MutableGATTServiceArgs.fromList(self.readValue() as! [Any?])
    case 138:
      return ATTRequestArgs.fromList(self.readValue() as! [Any?])
    case 139:
      var enumResult: BluetoothLowEnergyStateArgs? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = BluetoothLowEnergyStateArgs(rawValue: enumResultAsInt)
      }
      return enumResult
    case 140:
      var enumResult: ConnectionStateArgs? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = ConnectionStateArgs(rawValue: enumResultAsInt)
      }
      return enumResult
    case 141:
      var enumResult: GATTCharacteristicPropertyArgs? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = GATTCharacteristicPropertyArgs(rawValue: enumResultAsInt)
      }
      return enumResult
    case 142:
      var enumResult: GATTCharacteristicPermissionArgs? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = GATTCharacteristicPermissionArgs(rawValue: enumResultAsInt)
      }
      return enumResult
    case 143:
      var enumResult: GATTCharacteristicWriteTypeArgs? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = GATTCharacteristicWriteTypeArgs(rawValue: enumResultAsInt)
      }
      return enumResult
    case 144:
      var enumResult: ATTErrorArgs? = nil
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as? Int)
      if let enumResultAsInt = enumResultAsInt {
        enumResult = ATTErrorArgs(rawValue: enumResultAsInt)
      }
      return enumResult
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class PigeonPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? AdvertisementArgs {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? CentralArgs {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? PeripheralArgs {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else if let value = value as? GATTDescriptorArgs {
      super.writeByte(132)
      super.writeValue(value.toList())
    } else if let value = value as? GATTCharacteristicArgs {
      super.writeByte(133)
      super.writeValue(value.toList())
    } else if let value = value as? GATTServiceArgs {
      super.writeByte(134)
      super.writeValue(value.toList())
    } else if let value = value as? MutableGATTDescriptorArgs {
      super.writeByte(135)
      super.writeValue(value.toList())
    } else if let value = value as? MutableGATTCharacteristicArgs {
      super.writeByte(136)
      super.writeValue(value.toList())
    } else if let value = value as? MutableGATTServiceArgs {
      super.writeByte(137)
      super.writeValue(value.toList())
    } else if let value = value as? ATTRequestArgs {
      super.writeByte(138)
      super.writeValue(value.toList())
    } else if let value = value as? BluetoothLowEnergyStateArgs {
      super.writeByte(139)
      super.writeValue(value.rawValue)
    } else if let value = value as? ConnectionStateArgs {
      super.writeByte(140)
      super.writeValue(value.rawValue)
    } else if let value = value as? GATTCharacteristicPropertyArgs {
      super.writeByte(141)
      super.writeValue(value.rawValue)
    } else if let value = value as? GATTCharacteristicPermissionArgs {
      super.writeByte(142)
      super.writeValue(value.rawValue)
    } else if let value = value as? GATTCharacteristicWriteTypeArgs {
      super.writeByte(143)
      super.writeValue(value.rawValue)
    } else if let value = value as? ATTErrorArgs {
      super.writeByte(144)
      super.writeValue(value.rawValue)
    } else {
      super.writeValue(value)
    }
  }
}

private class PigeonPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PigeonPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PigeonPigeonCodecWriter(data: data)
  }
}

class PigeonPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = PigeonPigeonCodec(readerWriter: PigeonPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol CentralManagerHostAPI {
  func initialize() throws
  func getState() throws -> BluetoothLowEnergyStateArgs
  func showAppSettings(completion: @escaping (Result<Void, Error>) -> Void)
  func startDiscovery(serviceUUIDsArgs: [String]) throws
  func stopDiscovery() throws
  func retrieveConnectedPeripherals() throws -> [PeripheralArgs]
  func connect(uuidArgs: String, completion: @escaping (Result<Void, Error>) -> Void)
  func disconnect(uuidArgs: String, completion: @escaping (Result<Void, Error>) -> Void)
  func getMaximumWriteLength(uuidArgs: String, typeArgs: GATTCharacteristicWriteTypeArgs) throws -> Int64
  func readRSSI(uuidArgs: String, completion: @escaping (Result<Int64, Error>) -> Void)
  func discoverServices(uuidArgs: String, completion: @escaping (Result<[GATTServiceArgs], Error>) -> Void)
  func discoverIncludedServices(uuidArgs: String, hashCodeArgs: Int64, completion: @escaping (Result<[GATTServiceArgs], Error>) -> Void)
  func discoverCharacteristics(uuidArgs: String, hashCodeArgs: Int64, completion: @escaping (Result<[GATTCharacteristicArgs], Error>) -> Void)
  func discoverDescriptors(uuidArgs: String, hashCodeArgs: Int64, completion: @escaping (Result<[GATTDescriptorArgs], Error>) -> Void)
  func readCharacteristic(uuidArgs: String, hashCodeArgs: Int64, completion: @escaping (Result<FlutterStandardTypedData, Error>) -> Void)
  func writeCharacteristic(uuidArgs: String, hashCodeArgs: Int64, valueArgs: FlutterStandardTypedData, typeArgs: GATTCharacteristicWriteTypeArgs, completion: @escaping (Result<Void, Error>) -> Void)
  func setCharacteristicNotifyState(uuidArgs: String, hashCodeArgs: Int64, stateArgs: Bool, completion: @escaping (Result<Void, Error>) -> Void)
  func readDescriptor(uuidArgs: String, hashCodeArgs: Int64, completion: @escaping (Result<FlutterStandardTypedData, Error>) -> Void)
  func writeDescriptor(uuidArgs: String, hashCodeArgs: Int64, valueArgs: FlutterStandardTypedData, completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class CentralManagerHostAPISetup {
  static var codec: FlutterStandardMessageCodec { PigeonPigeonCodec.shared }
  /// Sets up an instance of `CentralManagerHostAPI` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: CentralManagerHostAPI?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let initializeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.initialize\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeChannel.setMessageHandler { _, reply in
        do {
          try api.initialize()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      initializeChannel.setMessageHandler(nil)
    }
    let getStateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.getState\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getStateChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getState()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getStateChannel.setMessageHandler(nil)
    }
    let showAppSettingsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.showAppSettings\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      showAppSettingsChannel.setMessageHandler { _, reply in
        api.showAppSettings { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      showAppSettingsChannel.setMessageHandler(nil)
    }
    let startDiscoveryChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.startDiscovery\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startDiscoveryChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let serviceUUIDsArgsArg = args[0] as! [String]
        do {
          try api.startDiscovery(serviceUUIDsArgs: serviceUUIDsArgsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startDiscoveryChannel.setMessageHandler(nil)
    }
    let stopDiscoveryChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.stopDiscovery\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopDiscoveryChannel.setMessageHandler { _, reply in
        do {
          try api.stopDiscovery()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopDiscoveryChannel.setMessageHandler(nil)
    }
    let retrieveConnectedPeripheralsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.retrieveConnectedPeripherals\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      retrieveConnectedPeripheralsChannel.setMessageHandler { _, reply in
        do {
          let result = try api.retrieveConnectedPeripherals()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      retrieveConnectedPeripheralsChannel.setMessageHandler(nil)
    }
    let connectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.connect\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      connectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let uuidArgsArg = args[0] as! String
        api.connect(uuidArgs: uuidArgsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      connectChannel.setMessageHandler(nil)
    }
    let disconnectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.disconnect\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      disconnectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let uuidArgsArg = args[0] as! String
        api.disconnect(uuidArgs: uuidArgsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      disconnectChannel.setMessageHandler(nil)
    }
    let getMaximumWriteLengthChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.getMaximumWriteLength\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getMaximumWriteLengthChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let uuidArgsArg = args[0] as! String
        let typeArgsArg = args[1] as! GATTCharacteristicWriteTypeArgs
        do {
          let result = try api.getMaximumWriteLength(uuidArgs: uuidArgsArg, typeArgs: typeArgsArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getMaximumWriteLengthChannel.setMessageHandler(nil)
    }
    let readRSSIChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.readRSSI\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      readRSSIChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let uuidArgsArg = args[0] as! String
        api.readRSSI(uuidArgs: uuidArgsArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      readRSSIChannel.setMessageHandler(nil)
    }
    let discoverServicesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.discoverServices\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      discoverServicesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let uuidArgsArg = args[0] as! String
        api.discoverServices(uuidArgs: uuidArgsArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      discoverServicesChannel.setMessageHandler(nil)
    }
    let discoverIncludedServicesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.discoverIncludedServices\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      discoverIncludedServicesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let uuidArgsArg = args[0] as! String
        let hashCodeArgsArg = args[1] is Int64 ? args[1] as! Int64 : Int64(args[1] as! Int32)
        api.discoverIncludedServices(uuidArgs: uuidArgsArg, hashCodeArgs: hashCodeArgsArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      discoverIncludedServicesChannel.setMessageHandler(nil)
    }
    let discoverCharacteristicsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.discoverCharacteristics\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      discoverCharacteristicsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let uuidArgsArg = args[0] as! String
        let hashCodeArgsArg = args[1] is Int64 ? args[1] as! Int64 : Int64(args[1] as! Int32)
        api.discoverCharacteristics(uuidArgs: uuidArgsArg, hashCodeArgs: hashCodeArgsArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      discoverCharacteristicsChannel.setMessageHandler(nil)
    }
    let discoverDescriptorsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.discoverDescriptors\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      discoverDescriptorsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let uuidArgsArg = args[0] as! String
        let hashCodeArgsArg = args[1] is Int64 ? args[1] as! Int64 : Int64(args[1] as! Int32)
        api.discoverDescriptors(uuidArgs: uuidArgsArg, hashCodeArgs: hashCodeArgsArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      discoverDescriptorsChannel.setMessageHandler(nil)
    }
    let readCharacteristicChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.readCharacteristic\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      readCharacteristicChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let uuidArgsArg = args[0] as! String
        let hashCodeArgsArg = args[1] is Int64 ? args[1] as! Int64 : Int64(args[1] as! Int32)
        api.readCharacteristic(uuidArgs: uuidArgsArg, hashCodeArgs: hashCodeArgsArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      readCharacteristicChannel.setMessageHandler(nil)
    }
    let writeCharacteristicChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.writeCharacteristic\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      writeCharacteristicChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let uuidArgsArg = args[0] as! String
        let hashCodeArgsArg = args[1] is Int64 ? args[1] as! Int64 : Int64(args[1] as! Int32)
        let valueArgsArg = args[2] as! FlutterStandardTypedData
        let typeArgsArg = args[3] as! GATTCharacteristicWriteTypeArgs
        api.writeCharacteristic(uuidArgs: uuidArgsArg, hashCodeArgs: hashCodeArgsArg, valueArgs: valueArgsArg, typeArgs: typeArgsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      writeCharacteristicChannel.setMessageHandler(nil)
    }
    let setCharacteristicNotifyStateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.setCharacteristicNotifyState\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setCharacteristicNotifyStateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let uuidArgsArg = args[0] as! String
        let hashCodeArgsArg = args[1] is Int64 ? args[1] as! Int64 : Int64(args[1] as! Int32)
        let stateArgsArg = args[2] as! Bool
        api.setCharacteristicNotifyState(uuidArgs: uuidArgsArg, hashCodeArgs: hashCodeArgsArg, stateArgs: stateArgsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setCharacteristicNotifyStateChannel.setMessageHandler(nil)
    }
    let readDescriptorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.readDescriptor\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      readDescriptorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let uuidArgsArg = args[0] as! String
        let hashCodeArgsArg = args[1] is Int64 ? args[1] as! Int64 : Int64(args[1] as! Int32)
        api.readDescriptor(uuidArgs: uuidArgsArg, hashCodeArgs: hashCodeArgsArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      readDescriptorChannel.setMessageHandler(nil)
    }
    let writeDescriptorChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerHostAPI.writeDescriptor\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      writeDescriptorChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let uuidArgsArg = args[0] as! String
        let hashCodeArgsArg = args[1] is Int64 ? args[1] as! Int64 : Int64(args[1] as! Int32)
        let valueArgsArg = args[2] as! FlutterStandardTypedData
        api.writeDescriptor(uuidArgs: uuidArgsArg, hashCodeArgs: hashCodeArgsArg, valueArgs: valueArgsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      writeDescriptorChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol CentralManagerFlutterAPIProtocol {
  func onStateChanged(stateArgs stateArgsArg: BluetoothLowEnergyStateArgs, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onDiscovered(peripheralArgs peripheralArgsArg: PeripheralArgs, rssiArgs rssiArgsArg: Int64, advertisementArgs advertisementArgsArg: AdvertisementArgs, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onConnectionStateChanged(peripheralArgs peripheralArgsArg: PeripheralArgs, stateArgs stateArgsArg: ConnectionStateArgs, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onCharacteristicNotified(peripheralArgs peripheralArgsArg: PeripheralArgs, characteristicArgs characteristicArgsArg: GATTCharacteristicArgs, valueArgs valueArgsArg: FlutterStandardTypedData, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class CentralManagerFlutterAPI: CentralManagerFlutterAPIProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: PigeonPigeonCodec {
    return PigeonPigeonCodec.shared
  }
  func onStateChanged(stateArgs stateArgsArg: BluetoothLowEnergyStateArgs, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerFlutterAPI.onStateChanged\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([stateArgsArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onDiscovered(peripheralArgs peripheralArgsArg: PeripheralArgs, rssiArgs rssiArgsArg: Int64, advertisementArgs advertisementArgsArg: AdvertisementArgs, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerFlutterAPI.onDiscovered\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([peripheralArgsArg, rssiArgsArg, advertisementArgsArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onConnectionStateChanged(peripheralArgs peripheralArgsArg: PeripheralArgs, stateArgs stateArgsArg: ConnectionStateArgs, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerFlutterAPI.onConnectionStateChanged\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([peripheralArgsArg, stateArgsArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onCharacteristicNotified(peripheralArgs peripheralArgsArg: PeripheralArgs, characteristicArgs characteristicArgsArg: GATTCharacteristicArgs, valueArgs valueArgsArg: FlutterStandardTypedData, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.bluetooth_low_energy_darwin.CentralManagerFlutterAPI.onCharacteristicNotified\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([peripheralArgsArg, characteristicArgsArg, valueArgsArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol PeripheralManagerHostAPI {
  func initialize() throws
  func getState() throws -> BluetoothLowEnergyStateArgs
  func showAppSettings(completion: @escaping (Result<Void, Error>) -> Void)
  func addService(serviceArgs: MutableGATTServiceArgs, completion: @escaping (Result<Void, Error>) -> Void)
  func removeService(hashCodeArgs: Int64) throws
  func removeAllServices() throws
  func startAdvertising(advertisementArgs: AdvertisementArgs, completion: @escaping (Result<Void, Error>) -> Void)
  func stopAdvertising() throws
  func getMaximumNotifyLength(uuidArgs: String) throws -> Int64
  func respond(hashCodeArgs: Int64, valueArgs: FlutterStandardTypedData?, errorArgs: ATTErrorArgs) throws
  func updateValue(hashCodeArgs: Int64, valueArgs: FlutterStandardTypedData, uuidsArgs: [String]?) throws -> Bool
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class PeripheralManagerHostAPISetup {
  static var codec: FlutterStandardMessageCodec { PigeonPigeonCodec.shared }
  /// Sets up an instance of `PeripheralManagerHostAPI` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: PeripheralManagerHostAPI?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let initializeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerHostAPI.initialize\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeChannel.setMessageHandler { _, reply in
        do {
          try api.initialize()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      initializeChannel.setMessageHandler(nil)
    }
    let getStateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerHostAPI.getState\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getStateChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getState()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getStateChannel.setMessageHandler(nil)
    }
    let showAppSettingsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerHostAPI.showAppSettings\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      showAppSettingsChannel.setMessageHandler { _, reply in
        api.showAppSettings { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      showAppSettingsChannel.setMessageHandler(nil)
    }
    let addServiceChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerHostAPI.addService\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addServiceChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let serviceArgsArg = args[0] as! MutableGATTServiceArgs
        api.addService(serviceArgs: serviceArgsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      addServiceChannel.setMessageHandler(nil)
    }
    let removeServiceChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerHostAPI.removeService\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      removeServiceChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let hashCodeArgsArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        do {
          try api.removeService(hashCodeArgs: hashCodeArgsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      removeServiceChannel.setMessageHandler(nil)
    }
    let removeAllServicesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerHostAPI.removeAllServices\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      removeAllServicesChannel.setMessageHandler { _, reply in
        do {
          try api.removeAllServices()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      removeAllServicesChannel.setMessageHandler(nil)
    }
    let startAdvertisingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerHostAPI.startAdvertising\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startAdvertisingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let advertisementArgsArg = args[0] as! AdvertisementArgs
        api.startAdvertising(advertisementArgs: advertisementArgsArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startAdvertisingChannel.setMessageHandler(nil)
    }
    let stopAdvertisingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerHostAPI.stopAdvertising\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopAdvertisingChannel.setMessageHandler { _, reply in
        do {
          try api.stopAdvertising()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopAdvertisingChannel.setMessageHandler(nil)
    }
    let getMaximumNotifyLengthChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerHostAPI.getMaximumNotifyLength\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getMaximumNotifyLengthChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let uuidArgsArg = args[0] as! String
        do {
          let result = try api.getMaximumNotifyLength(uuidArgs: uuidArgsArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getMaximumNotifyLengthChannel.setMessageHandler(nil)
    }
    let respondChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerHostAPI.respond\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      respondChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let hashCodeArgsArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let valueArgsArg: FlutterStandardTypedData? = nilOrValue(args[1])
        let errorArgsArg = args[2] as! ATTErrorArgs
        do {
          try api.respond(hashCodeArgs: hashCodeArgsArg, valueArgs: valueArgsArg, errorArgs: errorArgsArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      respondChannel.setMessageHandler(nil)
    }
    let updateValueChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerHostAPI.updateValue\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      updateValueChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let hashCodeArgsArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        let valueArgsArg = args[1] as! FlutterStandardTypedData
        let uuidsArgsArg: [String]? = nilOrValue(args[2])
        do {
          let result = try api.updateValue(hashCodeArgs: hashCodeArgsArg, valueArgs: valueArgsArg, uuidsArgs: uuidsArgsArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      updateValueChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol PeripheralManagerFlutterAPIProtocol {
  func onStateChanged(stateArgs stateArgsArg: BluetoothLowEnergyStateArgs, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func didReceiveRead(requestArgs requestArgsArg: ATTRequestArgs, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func didReceiveWrite(requestsArgs requestsArgsArg: [ATTRequestArgs], completion: @escaping (Result<Void, PigeonError>) -> Void)
  func isReady(completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onCharacteristicNotifyStateChanged(hashCodeArgs hashCodeArgsArg: Int64, centralArgs centralArgsArg: CentralArgs, stateArgs stateArgsArg: Bool, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class PeripheralManagerFlutterAPI: PeripheralManagerFlutterAPIProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: PigeonPigeonCodec {
    return PigeonPigeonCodec.shared
  }
  func onStateChanged(stateArgs stateArgsArg: BluetoothLowEnergyStateArgs, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerFlutterAPI.onStateChanged\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([stateArgsArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func didReceiveRead(requestArgs requestArgsArg: ATTRequestArgs, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerFlutterAPI.didReceiveRead\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([requestArgsArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func didReceiveWrite(requestsArgs requestsArgsArg: [ATTRequestArgs], completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerFlutterAPI.didReceiveWrite\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([requestsArgsArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func isReady(completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerFlutterAPI.isReady\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage(nil) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onCharacteristicNotifyStateChanged(hashCodeArgs hashCodeArgsArg: Int64, centralArgs centralArgsArg: CentralArgs, stateArgs stateArgsArg: Bool, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.bluetooth_low_energy_darwin.PeripheralManagerFlutterAPI.onCharacteristicNotifyStateChanged\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([hashCodeArgsArg, centralArgsArg, stateArgsArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
